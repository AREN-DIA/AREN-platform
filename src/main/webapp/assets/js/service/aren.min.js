const Authority={DELETED:"DELETED",GUEST:"GUEST",USER:"USER",MODO:"MODO",ADMIN:"ADMIN",SUPERADMIN:"SUPERADMIN",_value:{DELETED:-1,GUEST:0,USER:1,MODO:2,ADMIN:3,SUPERADMIN:4}},Opinion={FOR:"FOR",NEUTRAL:"NEUTRAL",AGAINST:"AGAINST"},Hypostase=[["EXPLANATION","LAW","PRINCIPLE","THEORY","BELIEF","CONJECTURE","HYPOTHESIS","AXIOM","DEFINITION"],["QUALITATIVE","VARIABLE","OBJECT","EVENT","PHENOMENON","DATA","MODE","DOMAIN"],["QUANTITATIVE","VARIATION","VARIANCE","APPROXIMATION","VALUE","CLUE","INVARIANT","DIMENSION"],["STRUCTURAL","STRUCTURE","METHOD","FORMALISM","CLASSIFICATION","PARADIGME"],["DIFFICULTY","APORIA","PARADOXE","PROBLEM"]];function Tag(obj={}){if(obj.constructor===String){let split=(obj=obj.replace(/[^A-Za-zÀ-ÖØ-öø-ÿ0-9 \-\']/g,"").trim()).split("|");split[1]?this.power=1*split[1]:this.power=0,split[0]=split[0].trim(),"-"===split[0][0]?(this.negative=!0,this.value=split[0].substring(1).trim()):(this.negative=!1,this.value=split[0])}else this.value=obj.value,this.negative=obj.negative,this.power=obj.power}function Message(obj={}){this.title=obj.title,this.message=obj.message,this.details=obj.details}function Entity(obj={}){for(let attr in this.attrs)this[attr]=obj[attr]?obj[attr]:void 0;for(let attr in this.manyToOne)this[attr]=void 0;for(let attr in this.oneToMany)this[attr]=[];for(let attr in this.manyToMany)this[attr]=[]}function Configuration(obj={}){Entity.call(this,obj)}function Category(obj={}){Entity.call(this,obj)}function Document(obj={}){Entity.call(this,obj)}function Debate(obj={}){Entity.call(this,obj)}function Comment(obj={}){Entity.call(this,obj)}function Institution(obj={}){Entity.call(this,obj)}function Notification(obj={}){Entity.call(this,obj)}function Team(obj={}){Entity.call(this,obj)}function User(obj={}){Entity.call(this,obj),this.authority=Authority.GUEST}Configuration.prototype.attrs={id:Number,key:String,value:String},Category.prototype.attrs={id:Number,name:String,picture:String,debatesCount:Number,lastCommentDate:Date},Category.prototype.oneToMany={documents:[Document,"category"]},Category.prototype.debates=function(){return this.documents.map(document=>document.debates).flat()},Document.prototype.attrs={id:Number,created:Date,name:String,author:String,content:String,debatesCount:Number,lastCommentDate:Date},Document.prototype.oneToMany={debates:[Debate,"document"]},Document.prototype.manyToOne={category:[Category,"documents"]},Debate.prototype.attrs={id:Number,created:Date,name:String,closed:Date,active:Boolean,commentsCount:Number,commentsCountFor:Number,commentsCountAgainst:Number,lastCommentDate:Date,withHypostases:Boolean,reformulationCheck:Boolean,idfixLink:Boolean,openPublic:Boolean},Debate.prototype.oneToMany={comments:[Comment,"debate"]},Debate.prototype.manyToOne={owner:[User,"createdDebates"],document:[Document,"debates"]},Debate.prototype.manyToMany={teams:[Team,"debates"],guests:[User,"invitedDebates"]},Debate.prototype.deepSortComments=function(sortFunction){this.comments.sort(sortFunction);let len=this.comments.length;for(let i=0;i<len;i++)this.comments[i].deepSortComments(sortFunction)},Comment.prototype.attrs={id:Number,created:Date,reformulation:String,argumentation:String,selection:String,startContainer:String,startOffset:Number,endContainer:String,endOffset:Number,opinion:String,signaled:Boolean,moderated:Boolean,hypostases:Array,proposedTags:Array,tags:Array},Comment.prototype.oneToMany={comments:[Comment,"parent"]},Comment.prototype.manyToOne={owner:[User,"comments"],debate:[Debate,"comments"],parent:[Comment,"comments"]},Comment.prototype.deepSortComments=function(sortFunction){this.comments.sort(sortFunction);let len=this.comments.length;for(let i=0;i<len;i++)this.comments[i].deepSortComments(sortFunction)},Comment.prototype.compareBoundaryPoints=function(type,comment){return compareRange(type,this,comment)},Institution.prototype.attrs={id:Number,type:String,name:String,academy:String},Institution.prototype.oneToMany={users:[User,"institution"],teams:[Team,"institution"]},Notification.prototype.attrs={id:Number,owner:Number,created:Date,content:Message,unread:Boolean,comment:Number,debate:Number},Team.prototype.attrs={id:Number,entId:String,name:String,community:Boolean,debatesCount:Number,usersCount:Number},Team.prototype.manyToOne={institution:[Institution,"teams"]},Team.prototype.manyToMany={debates:[Debate,"teams"],users:[User,"teams"]},User.prototype.attrs={id:Number,entId:String,username:String,password:String,firstName:String,lastName:String,email:String,lastLogin:Date,active:Boolean,authority:String},User.prototype.oneToMany={comments:[Comment,"owner"],createdDebates:[Debate,"owner"],notifications:[Notification,"owner"]},User.prototype.manyToOne={institution:[Institution,"users"]},User.prototype.manyToMany={invitedDebates:[Debate,"guests"],teams:[Team,"users"]},User.prototype.fullName=function(){return this.firstName&&this.lastName?this.firstName+" "+this.lastName:this.username},User.prototype.is=function(authority){return Authority._value[this.authority]>=Authority._value[authority]},ApiService=function(anUrl,locale){let self=this;this.Configs={},this.Store={clear(){this.Category=[],this.Document=[],this.Debate=[],this.Comment=[],this.Institution=[],this.Notification=[],this.Team=[],this.User=[]},detach(obj){this[obj.constructor.name].remove(obj)},remove(obj){let manyToOne=obj.manyToOne,oneToMany=obj.oneToMany,manyToMany=obj.manyToMany;for(let foreignKey in manyToOne)obj[foreignKey]&&obj[foreignKey][manyToOne[foreignKey][1]].remove(obj);for(let collection in oneToMany)if(obj[collection]){let len=obj[collection].length;for(let i=0;i<len;i++)delete obj[collection][i][oneToMany[collection][1]]}for(let collection in manyToMany)if(obj[collection]){let len=obj[collection].length;for(let i=0;i<len;i++)obj[collection][i][manyToMany[collection][1]].remove(obj)}this.detach(obj)},createOrUpdate(obj,constructor){if(!isNaN(obj))return this.get(1*obj,constructor);let that=this.get(obj.id,constructor);-1===that&&(that=new constructor,this.hasOwnProperty(constructor.name)&&this[constructor.name].push(that));let attrs=that.attrs,manyToOne=that.manyToOne,oneToMany=that.oneToMany,manyToMany=that.manyToMany;for(let attr in attrs)if(void 0!==obj[attr])switch(attrs[attr]){case Boolean:that[attr]=!!obj[attr];break;case Number:that[attr]=1*obj[attr];break;case String:that[attr]=""+obj[attr];break;case Date:that[attr]=new Date(obj[attr]);break;case Array:that[attr]=obj[attr];break;default:that[attr]=new attrs[attr](obj[attr])}if(constructor===Comment&&void 0!==that.tags){let len=that.tags.length;for(let i=0;i<len;i++){let pTag=that.proposedTags.find(t=>t.value===that.tags[i].value);void 0!==pTag&&(that.tags[i]=pTag)}}for(let foreignKey in manyToOne)if(void 0!==obj[foreignKey]&&(that[foreignKey]=this.createOrUpdate(obj[foreignKey],manyToOne[foreignKey][0]),manyToOne[foreignKey][1])){let foreignCollection=that[foreignKey][manyToOne[foreignKey][1]];foreignCollection.includes(that)||foreignCollection.push(that)}for(let collection in oneToMany)if(void 0!==obj[collection]&&obj[collection]&&obj[collection].length>0){that[collection].splice(0,that[collection].length);let len=obj[collection].length;for(let i=0;i<len;i++){let foreignObj=this.createOrUpdate(obj[collection][i],oneToMany[collection][0]);that[collection].includes(foreignObj)||that[collection].push(foreignObj),oneToMany[collection][1]&&(foreignObj[oneToMany[collection][1]]=that)}}for(let collection in manyToMany)if(void 0!==obj[collection]&&obj[collection]&&obj[collection].length>0){that[collection].splice(0,that[collection].length);let len=obj[collection].length;for(let i=0;i<len;i++){let foreignObj=this.createOrUpdate(obj[collection][i],manyToMany[collection][0]);if(that[collection].includes(foreignObj)||that[collection].push(foreignObj),manyToMany[collection][1]){let foreignCollection=foreignObj[manyToMany[collection][1]];foreignCollection.includes(that)||foreignCollection.push(that)}}}return that},get(id,constructor){if(this.hasOwnProperty(constructor.name)){let index=this[constructor.name].findIndex(o=>o.id===id);if(-1!==index)return this[constructor.name][index]}return-1}},this.Store.clear(),this.onLoad=loading=>{},this.onError=(json,xhttp)=>{"string"==typeof json?(console.log(xhttp),alert("ERREUR INTERNE\n\nToutes nos excuses, une erreur s'est produite sur nos serveurs.\nVeuillez réessayer ou contacter un administrateur si l'erreur persiste.")):(console.log(xhttp),alert("ERREUR : "+json.title+"\n\n"+Message.parse(json)))};let url=anUrl,xhttp;this.abort=()=>{xhttp.abort()};let ajaxCall=({method:method,path:path,headers:headers,onSuccess:onSuccess,onError:onError,onProgress:onProgress,data:data,json:json=!0,async:async=!0,loading:loading=!0}={})=>{let xhttp=new XMLHttpRequest;xhttp.onreadystatechange=()=>{if(4!==xhttp.readyState||200!==xhttp.status&&204!==xhttp.status){if(3===xhttp.readyState){if(onProgress){let newResponses=xhttp.responseText.split("\ndata: "),response=newResponses[newResponses.length-1];try{onProgress(JSON.parse(response))}catch(ex){onProgress(response)}}}else if(4===xhttp.readyState){let response=xhttp.responseText,jsonResponse={};if(onProgress){let newResponses=response.split("\ndata: ");response=newResponses[newResponses.length-1]}try{jsonResponse=JSON.parse(response)}catch(e){jsonResponse=response}onError?onError(jsonResponse,xhttp):this.onError(jsonResponse,xhttp),loading&&this.onLoad(!1)}}else{let arr=xhttp.getAllResponseHeaders().trim().split(/[\r\n]+/),headersMap={};if(arr.forEach((function(line){let parts=line.split(": "),header=parts.shift(),value=parts.join(": ");headersMap[header]=value})),onSuccess){let returnValue;try{returnValue=JSON.parse(xhttp.responseText)}catch(e){returnValue=xhttp.responseText}onSuccess(returnValue,headersMap)}loading&&this.onLoad(!1)}},xhttp.open(method,url+"/"+path,async);for(let header in headers)xhttp.setRequestHeader(header.name,header.value);xhttp.setRequestHeader("Accept-Language",locale),json?(xhttp.setRequestHeader("Content-type","application/json"),"string"==typeof data?xhttp.send(data):xhttp.send(JSON.stringify(decycle(data)))):xhttp.send(data),loading&&this.onLoad(!0)};this.import=({data:data,onSuccess:onSuccess,onError:onError,onProgress:onProgress,loading:loading}={})=>{ajaxCall({method:"POST",path:"aaf/import",data:data,onProgress:onProgress,onSuccess:onSuccess,onError:onError,json:!1,loading:loading})};let parse=function(obj,className){return Array.isArray(obj)?obj.map(obj=>self.Store.createOrUpdate(obj,className)):self.Store.createOrUpdate(obj,className)},decycle=function(obj,root=!0){if(!obj||"object"!=typeof obj)return obj;if(!root&&void 0!==obj.id)return{id:obj.id};if(obj.constructor===Date)return obj;if(Array.isArray(obj))return obj.map(el=>decycle(el,!1));let replica={};return Object.keys(obj).forEach(key=>replica[key]=decycle(obj[key],!1)),replica},EntityProcessor=function(resourcePath,className){this.call=({method:method,data:data=null,path:path="",onSuccess:onSuccess,onError:onError,onProgress:onProgress,query:query={},parsingClassName:parsingClassName=className,async:async=!0,loading:loading=!0}={})=>{let urlParameters=Object.keys(query).map(key=>key+"="+encodeURIComponent(query[key])).join("&");ajaxCall({method:method,data:data,path:resourcePath+path+(urlParameters.length>0?"?"+urlParameters:""),onSuccess:function(response){let result=response;response&&parsingClassName&&(result=parse(response,parsingClassName)),onSuccess&&onSuccess(result)},onError:onError,onProgress:onProgress,async:async,loading:loading})},this.getAll=(params={})=>{params.method="GET",this.call(params)},this.get=(params={})=>{params.method="GET",params.path="/"+params.id,this.call(params)},this.remove=(params={})=>{params.method="DELETE",params.path="/"+params.data.id;let onSuccess=params.onSuccess;params.onSuccess=function(){self.Store.remove(params.data),onSuccess&&onSuccess()},this.call(params)},this.create=(params={})=>{params.method="POST",this.call(params)},this.edit=(params={})=>{params.method="PUT",params.path="/"+params.data.id,this.call(params)},this.createOrUpdate=(params={})=>{params.data.id?this.edit(params):this.create(params)}},Listener;this.Documentation=function({onSuccess:onSuccess,onError:onError}={}){ajaxCall({method:"GET",path:"documentation",onSuccess:onSuccess,onError:onError})},Listener=window.SharedWorker?function(aPath,className){this.listen=({id:id,onMessage:onMessage}={})=>{let sseWorker=new SharedWorker("assets/js/service/worker.js"),eventPath=url+"/events/"+aPath+(id?"/"+id:"");sseWorker.port.postMessage(eventPath),sseWorker.port.addEventListener("message",message=>{let result=parse(JSON.parse(message.data.data),className);onMessage&&onMessage(result)},!1),sseWorker.port.start()}}:function(aPath,className){let eventPath=url+"/events/"+aPath,source=null;this.listen=({id:id,onMessage:onMessage}={})=>{source=new EventSource(eventPath+(id?"/"+id:"")),source.onmessage=message=>{let result=parse(JSON.parse(message.data),className);onMessage&&onMessage(result)},source.onclose=()=>{}},this.stop=()=>{source&&source.close()}},this.Categories=new EntityProcessor("categories",Category),this.Documents=new EntityProcessor("documents",Document),this.Debates=new EntityProcessor("debates",Debate),this.Teams=new EntityProcessor("teams",Team),this.Comments=new EntityProcessor("comments",Comment),this.Institutions=new EntityProcessor("institutions",Institution),this.Users=new EntityProcessor("users",User),this.Notifications=new EntityProcessor("notifications",Notification),this.Configurations=new EntityProcessor("configurations",Configuration),this.CommentListener=new Listener("comments",Comment),this.NotificationListener=new Listener("notifications",Notification),this.Users.getLoged=function(params={}){params.method="GET",params.path="/me",this.call(params)},this.Users.login=function(params={}){params.method="POST",params.path="/login",params.parsingClassName=!1;let onSuccess=params.onSuccess;params.onSuccess=token=>{document.cookie="Authorization="+token+"; maxAge="+(params.data.rememberMe?31104e3:-1)+"; path=/",document.location.reload(!0),onSuccess&&onSuccess()},this.call(params)},this.Users.logout=function(params={}){params.method="POST",params.path="/logout",params.parsingClassName=!1;let onSuccess=params.onSuccess;params.onSuccess=()=>{document.cookie="Authorization=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;",document.location.replace(""),onSuccess&&onSuccess()},this.call(params)},this.Users.passwd=function(params={}){params.method="PUT",params.path="/passwd",this.call(params)},this.Users.activate=function(params={}){params.method="GET",params.path="/activate",this.call(params)},this.Users.resetPasswd=function(params={}){params.method="POST",params.path="/resetPasswd",this.call(params)},this.Users.permanentRemove=function(params={}){params.method="DELETE",params.path="/"+params.data.id+"/permanent/",this.call(params)},this.Users.exists=function(params={}){params.method="GET",params.path="/test",params.query={identifier:params.data},params.parsingClassName=!1,this.call(params)},this.Documents.duplicate=function(params={}){params.method="POST",params.path="/"+params.id+"/duplicate",this.call(params)},this.Debates.addComment=function(params={}){params.method="POST",params.path="/"+params.id+"/comments",params.parsingClassName=Comment,this.call(params)},this.Debates.addTeam=function(params={}){params.method="PUT",params.path="/"+params.id+"/teams/"+params.data.id;let onSuccess=params.onSuccess;params.onSuccess=function(){self.Store.get(params.id,Debate).teams.push(params.data),params.data.debates.push(self.Store.get(params.id,Debate)),onSuccess&&onSuccess()},params.parsingClassName=Team,this.call(params)},this.Debates.removeTeam=function(params={}){params.method="DELETE",params.path="/"+params.id+"/teams/"+params.data.id;let onSuccess=params.onSuccess;params.onSuccess=function(){self.Store.get(params.id,Debate).teams.remove(params.data),onSuccess&&onSuccess()},this.call(params)},this.Debates.addGuest=function(params={}){params.method="PUT",params.path="/"+params.id+"/users/"+params.data.id;let onSuccess=params.onSuccess;params.onSuccess=function(){self.Store.get(params.id,Debate).guests.push(params.data),params.data.invitedDebates.push(self.Store.get(params.id,Debate)),onSuccess&&onSuccess()},params.parsingClassName=User,this.call(params)},this.Debates.removeGuest=function(params={}){params.method="DELETE",params.path="/"+params.id+"/users/"+params.data.id;let onSuccess=params.onSuccess;params.onSuccess=function(){self.Store.get(params.id,Debate).guests.remove(params.data),onSuccess&&onSuccess()},this.call(params)},this.Debates.getScraps=function(params={}){params.method="GET",params.path="/"+params.id+"/scraps",params.parsingClassName=!1,this.call(params)},this.Debates.getTheme=function(params={}){params.method="GET",params.path="/"+params.id+"/theme",params.parsingClassName=!1,this.call(params)},this.Teams.addUser=function(params={}){params.method="PUT",params.path="/"+params.id+"/users/"+params.data.id;let onSuccess=params.onSuccess;params.onSuccess=function(){self.Store.get(params.id,Team).users.push(params.data),params.data.teams.push(self.Store.get(params.id,Team)),onSuccess&&onSuccess()},params.parsingClassName=User,this.call(params)},this.Teams.removeUser=function(params={}){params.method="DELETE",params.path="/"+params.id+"/users/"+params.data.id;let onSuccess=params.onSuccess;params.onSuccess=function(){self.Store.get(params.id,Team).users.remove(params.data),onSuccess&&onSuccess()},this.call(params)},this.Comments.getScalar=function(params={}){params.method="POST",params.path="/scalar",params.parsingClassName=!1,this.call(params)},this.Comments.updateTags=function(params={}){params.method="PUT",params.path="/"+params.id+"/updateTags",params.parsingClassName=!1,this.call(params)},this.Comments.updateAllTags=function(params={}){params.method="PUT",params.path="/updateTags",params.parsingClassName=!1,this.call(params)},this.Notifications.readAll=function(params={}){params.method="PUT",this.call(params)},this.Configurations.getAll=function(params={}){params.method="GET";let onSuccess=params.onSuccess;params.onSuccess=function(result){self.Configs={};for(const prop of result)self.Configs[prop.key]="true"==prop.value||"false"!=prop.value&&prop.value;onSuccess&&onSuccess(result)},this.call(params)},this.Configurations.editAll=function(params={}){params.method="PUT",params.data=Object.entries(params.data).map(e=>({key:e[0],value:e[1]}));let onSuccess=params.onSuccess;params.onSuccess=function(result){self.Configs={};for(const prop of result)self.Configs[prop.key]="true"==prop.value||"false"!=prop.value&&prop.value;onSuccess&&onSuccess(result)},this.call(params)}};